# Path to alternative helm binary (--helm-binary)
# helmBinary: /usr/local/bin/helm

# Default values to set for args along with dedicated keys that can be set by contributors, cli args take precedence over these.
# In other words, unset values results in no flags passed to helm.
# See the helm usage (helm SUBCOMMAND -h) for more info on default values when those flags aren't provided.
helmDefaults:
  tillerless: true                  #dedicated default key for tillerless
  cleanupOnFail: true               #dedicated default key for helm flag --cleanup-on-fail
  # verify the chart before upgrading (only works with packaged charts not directories) (default false)
  verify: true
  # wait for k8s resources via --wait. (default false)
  wait: true
  # if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout (default false, Implemented in Helm3.5)
  waitForJobs: true
  # time in seconds to wait for any individual Kubernetes operation (like Jobs for hooks, and waits on pod/pvc/svc/deployment readiness) (default 300)
  timeout: 120
  # performs pods restart for the resource if applicable (default false)
  recreatePods: true
  # forces resource update through delete/recreate if needed (default false)
  force: false
  # limit the maximum number of revisions saved per release. Use 0 for no limit. (default 10)
  historyMax: 10
  # when using helm 3.2+, automatically create release namespaces if they do not exist (default true)
  createNamespace: true
  # if used with charts museum allows to pull unstable charts for deployment, for example: if 1.2.3 and 1.2.4-dev versions exist and set to true, 1.2.4-dev will be pulled (default false)
  devel: false
  # When set to `true`, skips running `helm dep up` and `helm dep build` on this release's chart.
  # Useful when the chart is broken, like seen in https://github.com/roboll/helmfile/issues/1547
  skipDeps: false

# these labels will be applied to all releases in a Helmfile.
# Useful in templating if you have a helmfile per environment or customer and don't want to copy the same label to each release
# commonLabels:
#   hello: world

#
# Nested helm files
#
helmfiles:
  # ingress-nginx
  - path: releases/ingress-nginx/helmfile.yaml

  # cert-manager
  - path: releases/cert-manager/helmfile.yaml
    values:
      - support_email: {{ requiredEnv "CERT_MANAGER_EMAIL"}}

  # gitea:
  # TODO: refactor out to normal values file?
  - path: releases/gitea/helmfile.yaml
    values:
      - host: git.spherics.dev
        gitea:
          appName: git.spherics
          admin:
            username: {{ requiredEnv "GITEA_ADMIN_USERNAME"}}
            password: {{ requiredEnv "GITEA_ADMIN_PASSWORD"}}
            email: {{ requiredEnv "GITEA_ADMIN_EMAIL"}}

        db:
          username: gitea
          password: {{ requiredEnv "GITEA_DB_PASSWORD"}}

  # owncloud:
  - path: releases/owncloud/helmfile.yaml
    values:
      - host: owncloud.spherics.space
      - user:
          email: {{ requiredEnv "OWNCLOUD_ADMIN_EMAIL"}}
          username: {{ requiredEnv "OWNCLOUD_ADMIN_USERNAME"}}
          password: {{ requiredEnv "OWNCLOUD_ADMIN_PASSWORD"}}
        db:
          rootPassword: {{ requiredEnv "OWNCLOUD_DB_ROOTPW"}}
          username: {{ requiredEnv "OWNCLOUD_DB_USERNAME"}}
          password: {{ requiredEnv "OWNCLOUD_DB_PASSWORD"}}

  # nextcloud:
  - path: releases/nextcloud/helmfile.yaml
    values:
      - host: nextcloud.spherics.space
      - user:
          username: {{ requiredEnv "NEXTCLOUD_ADMIN_USERNAME"}}
          password: {{ requiredEnv "NEXTCLOUD_ADMIN_PASSWORD"}}
        db:
          username: nextcloud
          password: {{ requiredEnv "NEXTCLOUD_POSTGRES_PASSWORD"}}

        redis:
          password: { requiredEnv "NEXTCLOUD_REDIS_PASSWORD"}

  # chartmuseum
  - path: releases/chartmuseum/helmfile.yaml
    values:
      - host: charts.spherics.space
        gcp:
          bucket: spherics-charts
          serviceAccountFile: {{ requiredEnv "CHARTMUSEUM_SERVICE_ACCOUNT" }}
        auth:
          user: {{ requiredEnv "CHARTMUSEUM_USERNAME"}}
          password: {{ requiredEnv "CHARTMUSEUM_PASSWORD" }}

  # diaspora:
  # - path: releases/diaspora/helmfile.yaml
  #   values:
  #     - host: pod.spherics.space
  #     - db:
  #         username: diaspora
